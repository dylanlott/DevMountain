//MONGO DB NOTES 
######################
##Sanity check -- mongoDB 

write a javascript 
```
var userCount = function(){
	var count = db.Users.count(); 
	var entry = {_id: Date(), n: count}; 
	db.UserCountHistory.save(entry); 
	print("\today's User Count: " + entry.n); 
}

userCount(); 

```

Back to command prompt 

##back to shell 
mongo userCount.js

Will return: Total users 

######################
##Script to prevent database dropping

DB.prototype.dropDatabase = function() {
  print("don't do it man!"); 
}

db.dropDatabase = DB.prototype.dropDatabase; 

mongo safer.js --shell (stay in the shell with --save); 

db.drop //returns "Don't do it man!" 

######################
##Setting a better editor up for mongo 

C:\>set EDITOR="mySuperEditor.exe"

mongo> myFunction = function(x){}
mongo> edit myFunction 


######################
prevent disaster 

var _no_ = function() { print ("nope!"); }

DB.prototype.dropDatabase = _no_; 
db.dropDatabase = db.prototype.dropDatabase; 

DB.prototype.shutdownServer = _no_; 
db.shutdownServer = db.prototype.shutdownServer; 


######################
Storing Data in MongoDB 

-- does not require a schema
Overview: 
1. Storage Engine
2. saving documents 
3. Updating Documents 


######################
--Storage Engine
Memory mapped files -- server cannot store all its info in memory 

Serving your data and getting on its knees to blow you 

## Data Formatting --
BSON - "Binary JSON data format" Why BSON?

--very little marshaling is required 
--easy to traverse 
--efficient with memory 

bsonspec.org -- learn more about BSON spec 

This is the ONLY schema rule. 
1. Every document must have an _id field 

-- The size of document is limited to 16mb. Anything more and youll have to store across multiple docs 
-- If a database doesn't exist and you save to it, it'll auto create one 
-- can handle numeric, integer, floating, variable, and even complex objects are legal in mongo
-- cannot use an array as an _id

ObjectID() 
ObjectID().getTimestamp()


###
What happens if we try to save 2 different docs with same _id? 

The second document will save OVER the first one if there are 
_id collisions. 

if you use db.dbName.insert() it won't let you save the data 
insert will ensure that you don't fuck up _id numbers 

db.aaa.insert({x:1}); 
mongo will generate an _id for you when you don't specify one. 

Items reside within collections, but don't relate to each other
There aren't strict schema restrictions because of this. 


######################
Updating Documents 

db.foo.update(query, update, options); 

Unset command - take the

pop removes 


######################
Find and modify - affect only ONE document at a time

db.foo.findAndModify( {
	query: <document>,
	update: <document>,
	upsert: <boolean>, //create a new record if one does not exist 
	remove: <boolean>, //remove it if it matches this exact criteria
	new: <boolean>, //returns new/old record 
	sort: <document>,
	fields: <document>, //allows you to select which fields to return
} ); 



######################

FIND command

db.foo.find(query, projection)

query -- which documents
projection -- which fields should be return

if you don't spec a projection, it'll return ALL the documents form the query 


$gte === greater than or equal to 
$lte === less than or equal to 
$lt === less than
$gt === greater then 

$not === negate selection

$in [1,3] === return values are 1 or 3

$nin === return values that are NOT 1 or 3 

$all ['1', '3'] === return values that have 1 AND 3
















































































